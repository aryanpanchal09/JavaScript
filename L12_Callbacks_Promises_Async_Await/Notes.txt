async await >> promise chains >> callback hell

SYNC IN JS 
----------
SYNCHRONOUS 
-----------
Synchronous means the code runs in a particular sequence of instructions given in the program. Each instruction waits for the previous instruction to complete its execution 

ASYNCHRONOUS 
------------
Due to synchronous programming, sometimes imp instruction get blocked due to some previous instructions, which causes a delay in the UI. Asynchronous code execution allows to execute next instructions immediately and doesn't block the flow

CALLBACKS
---------
A callback is a function passed as an argument to another function

CALLBACK HELL 
-------------
Nested callbacks stacked below one another forming a pyramid structure (Pyramid of Doom)
This style of programming becomes difficult to understand & manage

PROMISES 
--------
Promise is for "eventual" completion of task. It's an object in JS. 
It's a solution to callback hell 

let promise = new Promise((resolve, reject) => {...})

*resolve & reject are callbacks provided by JS

Promise State 
-------------
1. Pending : the result is undefined 
2. Fullfilled [resolved] : the result is a value (fullfilled) | resolve(result)
3. Rejected : the result is an error object | reject(error)

*Promise has state (pending, fullfilled) & some result(result for resove & error for reject)

.then() & .catch()
promise.then((res) => {...})
promise.catch((err) => {...})

ASYNC-AWAIT 
-----------
async function always returns a promise 
async function myFunc(){...}

await pauses the execution of it's surrounding async function until the promise is settled 

