INTRODUCTION
------------
Javascript is the most popular development language used for creating Websites and Web_Development  

JS is a programming language. We use it to give instructions to the computer  

Chrome - Console - To clear console (Ctrl + L)
alert("Popup"); -> Semicolon means here my sentence ends 

console.log("Enter Anything"); - we can write this in Single Quotes('') also 
console.log means we want to print it in the console 

Javascript files extension .js 

To connect JS file with Browser we need a HTML File (index for conventional means) - Shift + ! (Boiler plate code) - Shift + !!!

VARIABLES 
---------
Variables are containers for data 
In simple means Variables are just containers in which the data can vary 

Value (14) - Memory Location () - Memory Location Address (radius)
Value (14) - Memory Location () - Memory Location Address (age)

age = 24;
age 

age + 1; // Output 25 

name = "Aryan"
name

To print the value of Varibale 
fullName = "Aryan Panchal";
console.log(fullName);

Always name the Varibale in a meaningful way

Boolean - true or false value 

Javascript is a dynamically typed language 
It means in other languages we had to declared the variable type but not in Javascript
Ex - Java fullName String we have to defined that in JS it's not necessary 

JS interpreter automatically calculated the datatype 

= -> assignment operator  
a = b -> Programing means the value of B is assign to A

Naming Convention in Variables 
``````````````````````````````
. Variable names are case sensitive ; "a" & "A" is different
. Only letters, digits, underscore(_) and $ is allowed. (not even space)
. Only a letter, underscore(_) or $ should be 1st character
. Reserved words cannot be variable names
  - console, break, do, while, class etc etc 

1a = "string"; // _1a or $1a is allowed 
console.log(1a); - Not allowed 

Naming Convetion 
````````````````
fullName  - Camel Case - First word small Second word Big - best naming convention to follow in Programming language 
full_name - snakecase 
full-name - kebabcase 
FullName  - Pascalcase

let, const & var
----------------
The above ways in which we assigned the variables is not a good practise to assign value to variable 
It simply means that we directly can't assign value to variables instead we use a keyword for that which are listed above 

var : Variable can be re-declared & updated. A global scope variable - minimum use 
var name = "JS";

let : Variable cannot be re-declared but can be updated. A block scope variable - maximum use 
let name = "JS";

let age = 24;
age = 25;

Here the age is now declared 25 and the memory space becomes same 

const : Variable cannot be re-declared or updated. A block scope variable - maximum use 
const name = "JS";

const means the value is now constant and can't be changed 
const age = 24;
age = 25; // can't be declared - assignment to constant variable

mainly used in Math problem

var - It's primarly used before 2015 but after ES6 JS update we started using let and const 
The main problem in using var is it can be re-declared 
var age = 24;
var age = 25; 
Which created a problem in bigger code that's why we don't use var now instead we started using let which doesn't allow re-declaration of var

Block 
-----
{
  let a = 5;
  console.log(a);
}

let a = 10; it will give an error to initialize it use second block 

{
  let a = 10;
  console.log(a);
}

DATA TYPES IN JS 
----------------
Number, String, Boolean, Undefined, Null, BigInt, Symbol 

To check the datatype of any variable we use 
typeof variable name; - typeof a;

(7) Primitive Data Type 
-----------------------
. Number 
. String 
. Boolean 

Not generally used datatype
. BigInt - let x = BigInt("123"); - 123n 
. Symbol - let y = Symbol("Hello"!)

Non-Primitive Data Type 
-----------------------
. Objects - It's a collection of values - key : value pair 
  . Arrays
  . Functions 

let this collection be name as A - now the name of collection A is an Object 
const A = {
  a = 10;
  b = 20;
};

To access a particular key 
A['age];

obj.keyname; 
obj.['keyname'];

console.log(student.age)

console.log(student['age']);

To change the value in Objects 
``````````````````````````````
student["age"] = student["age"] + 1;

const object key can be updated 

String + operator it will join 
"str" + 123 -> str123